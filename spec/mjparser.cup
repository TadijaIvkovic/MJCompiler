package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;



parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal PROG, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal FOR, STATIC, NAMESPACE;
terminal PLUS, MINUS, DIV, MOD, MUL, EQUAL, UNION, DBLDOT, SEMI, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE;
terminal LBRACKET, RBRACKET, LARROW, RARROW, EXCL, AMPER, LINE, MAP, DO, WHILE, SET;

terminal Integer NUMBER ;
terminal Character CHAR_CONST;
terminal Integer BOOL_CONST;
terminal String IDENT ;


nonterminal Program, ProgName, DeclarationList, ConstDeclList, ConstantList, Constants;
nonterminal VarDeclList, VarDecl, VarDeclarationList, VarDeclaration, MethodDeclList, MethodDecl, MethodSignature, Type;
nonterminal Brackets, FormPars, FormalParamList, FormalParamDecl, StatementList, Statement, Expr;
nonterminal Term, Unary, Factor, DesignatorStatement, ActPars, ActParamList, Designator, DesignatorName, DesignatorElem, Label, Assignop, Relop, Addop, Mulop, Setop;
nonterminal Condition, CondTerm, CondFact, Matched, Unmatched, Statements, WhileStart, DoWhileEnd, DoWhileStart, ConditionWithStatement;


Program ::= (Program) PROG ProgName:p DeclarationList LBRACE MethodDeclList RBRACE ;


ProgName ::= (ProgName) IDENT:pName ;

DeclarationList ::= (ConstDecLists) ConstDeclList DeclarationList
				    |
					 (VarDecLists) VarDecl DeclarationList
				    |
				     (NoDecLists) /* epsilon */
				    ;

ConstDeclList ::= (ConstDeclList) CONST Type IDENT EQUAL Constants ConstantList SEMI;

ConstantList ::= (ConstList) ConstantList COMMA IDENT EQUAL Constants
				 |
				 (NoConstList) /* epsilon */
				 ;

Constants ::=(NumConstant) NUMBER 
			 | 
			 (CharConstant) CHAR_CONST 
			 |
			 (BoolConstant) BOOL_CONST
			 ;


VarDeclList ::= (VarDeclarList) VarDeclList VarDecl  
				|
				(NoVarDeclarList) /* epsilon */ 
				;
				
VarDecl ::= (VarDecl) Type:varType VarDeclarationList SEMI ;

VarDeclarationList ::=  (VarDeclaratList) VarDeclarationList  COMMA VarDeclaration
						|
					    (VarDeclarat) VarDeclaration
						;
					
VarDeclaration ::= (VarDeclaration) IDENT Brackets ;

MethodDeclList ::=  (MethDeclList) MethodDeclList MethodDecl
					|
					(NoMethDeclList) /* epsilon */
					;

MethodDecl ::= (MethodDecl)  MethodSignature VarDeclList LBRACE StatementList RBRACE ;

MethodSignature ::= (MethTypeName) Type:retType IDENT:methName LPAREN FormPars RPAREN
					|
					(NoMethTypeName) VOID IDENT:methName LPAREN FormPars RPAREN
					;

FormPars ::= (FormalPars) FormalParamList 
			 |
			 (NoFormalPars)/* epsilon */ ;



FormalParamList ::= (FormalParsList) FormalParamList  COMMA FormalParamDecl
					|
					(FormalParsDecl) FormalParamDecl
					;
					
FormalParamDecl ::= (FormalParamDecl) Type IDENT Brackets ;


Brackets ::= (Bracket) LBRACKET RBRACKET
			 |
			 (NoBracket) /* epsilon */
			 ;

Type ::= (Type) IDENT:typeName ;

Statements ::= (Statements) LBRACE StatementList RBRACE ;
		 
StatementList ::= (StmtList)  StatementList Statement 
				  |
				  (NoStmtList) /* epsilon */
				  ;

Statement ::= (MatchedStmt) Matched
		      |
		      (UnmatchedStmt) Unmatched
		      ; 

Unmatched ::= (UnmatchedIf) IF LPAREN Condition RPAREN Statement
		 	  |
		 	  (UnmatchedIfElse) IF LPAREN Condition RPAREN Matched ELSE Unmatched
		 	  ;
				  
Matched ::=   (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
  			  |
  			  error SEMI:l
  			  {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
  			  |
			  (PrintStmtTwo) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI	 
			  |
			  (ReadStmt) READ LPAREN Designator RPAREN SEMI
			  |
			  (DesStmt) DesignatorStatement SEMI
			  |
			  (BreakStmt) BREAK SEMI
			  |
			  (ContinueStmt) CONTINUE SEMI
			  |
			  (ReturnStmt) RETURN Expr SEMI
			  |
			  (ReturnEmptyStmt) RETURN SEMI
			  |
			  (DoWhileStatementWithStmt) DO DoWhileStart Statement WHILE WhileStart LPAREN ConditionWithStatement RPAREN DoWhileEnd SEMI
			  |
			  (IfElseStmt) IF LPAREN Condition RPAREN Matched ELSE Matched
			  |
			  (BracedStmt) Statements
			  ;
			  
ConditionWithStatement ::=  (CondWithStatement) Condition COMMA DesignatorStatement
							|
							(CondSolo)Condition
							|
							(WithoutCond) /* epsilon */
							;
			  
DoWhileStart ::= (DoWhileStart) /* epsilon */;

DoWhileEnd ::= (DoWhileEnd) /* epsilon */;

WhileStart ::= (WhileStart) /* epsilon */;


DesignatorStatement ::= (DesginatorAssignop) Designator Assignop Expr
						|
						(DesignatorInc) Designator PLUS PLUS
						|
						(DesignatorDec) Designator MINUS MINUS
						| 
						(DesignatorSetop) Designator Assignop Designator Setop Designator
						|
						(DesignatorActPars) Designator LPAREN ActPars RPAREN
						;

ActPars ::=  (ActParams) ActParamList 
			 | 
		     (NoActParams) /* epsilon */ 
		     ;
			   
ActParamList ::= (ActParamsList) ActParamList COMMA Expr
				 |
				 (ActParamsExpr) Expr
				 ;
		
Condition ::=   (ConditionList)Condition LINE LINE CondTerm
				|
				(ConditionTerm) CondTerm
				;

CondTerm ::= (CondTermList) CondTerm AMPER AMPER CondFact
			 |
			 (ConditionFact) CondFact
			 ;
			
CondFact ::= (Cond) Expr
			 |
			 (CondExpr) Expr Relop Expr
			 ;
		
Expr ::= (ExprAddop) Expr:te Addop Term:t
		 |
		 (ExprTerm) Term:t
		 |
		 (ExprMap) Designator MAP Designator
		 ;

Term ::= (TermMulop) Term:te Mulop Unary:u
		 |
		 (TermFactor) Unary:u
		 ;

Unary ::= (UnaryFactor) Factor 
			|
			(UnaryMinusFactor) MINUS Factor
			;

Factor ::=  (FactorNum) NUMBER
			|
			(FactorChar) CHAR_CONST
			|
			(FactorBool) BOOL_CONST
			|
			(FactorNewExpr) NEW Type LBRACKET Expr RBRACKET
			|
			(FactorNewActPars) NEW Type LPAREN ActPars RPAREN
			|
			(FactorExpr) LPAREN Expr RPAREN
			|
		    (FactorDes) Designator:d
		    |
		    (FactorDesActPars) Designator LPAREN ActPars RPAREN
		    ;


Designator ::= (DesignatorEl) DesignatorName DesignatorElem
			   |
			   (DesignatorIdent) IDENT DOT IDENT
			   ;

DesignatorElem ::= (DesElem) LBRACKET Expr RBRACKET 
				   |
				   (NoDesElem) /* epsilon */
				   ;
					
DesignatorName ::= (DesignatorName) IDENT;

Label ::= (Label) IDENT;

Assignop ::= (Assignop) EQUAL;


Relop ::= (RelopEqual) EQUAL EQUAL
		|
		 (RelopNotEqual) EXCL EQUAL
		|
		(RelopRArrow) RARROW
		|
		(RelopLArrow) LARROW
		|
		(RelopLess) LARROW EQUAL
		|
		(RelopMore) RARROW EQUAL
		;

Addop ::= (AddopPlus)  PLUS 
		  |
		  (AddopMinus) MINUS
		  ;
		
		
Mulop ::= (MulopMul) MUL
		  |
		  (MulopDiv) DIV
		  |
		  (MulopMod) MOD
		  ;
		
Setop ::= (Setop) UNION ;
		
		

		 