package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;



parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal PROG, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal FOR, STATIC, NAMESPACE;
terminal PLUS, MINUS, DIV, MOD, MUL, EQUAL, DBLDOT, SEMI, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE;
terminal LBRACKET, RBRACKET, LARROW, RARROW, EXCL, AMPER, LINE;

terminal Integer NUMBER ;
terminal Character CHAR_CONST;
terminal BOOL_CONST;
terminal String IDENT ;


nonterminal Program Program;
nonterminal ProgName ProgName;
nonterminal NamespaceList NamespaceList;
nonterminal Namespace Namespace;
nonterminal DeclarationList DeclarationList;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstantList ConstantList;
nonterminal Constants Constants;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal VarDeclarationList VarDeclarationList;
nonterminal VarDeclaration VarDeclaration;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal MethodTypeName MethodTypeName;
nonterminal Type Type;
nonterminal Brackets Brackets;
nonterminal FormPars FormPars;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Expr Expr;
nonterminal Term Term;
nonterminal Factor Factor;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal ActPars ActPars;
nonterminal ActParamList ActParamList;
nonterminal Designator Designator;
nonterminal DesignatorElem DesignatorElem;
nonterminal Label Label;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;


Program ::= (Program) PROG ProgName:p NamespaceList:N1 DeclarationList:D2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(p, N1, D2, M3); RESULT.setLine(pleft); :} ;


ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :} ;

NamespaceList ::= (NameList)  NamespaceList:N1 Namespace:N2 {: RESULT=new NameList(N1, N2); RESULT.setLine(N1left); :}
					|
					(NoNameList) {: RESULT=new NoNameList(); :} /* epsilon */
					;

Namespace ::= (Namespace)  NAMESPACE IDENT:nName LBRACE DeclarationList:D1 LBRACE MethodDeclList:M2 RBRACE RBRACE {: RESULT=new Namespace(nName, D1, M2); RESULT.setLine(nNameleft); :};

DeclarationList ::= (ConstDecLists) ConstDeclList:C1 DeclarationList:D2 {: RESULT=new ConstDecLists(C1, D2); RESULT.setLine(C1left); :}
				    |
					 (VarDecLists) VarDecl:V1 DeclarationList:D2 {: RESULT=new VarDecLists(V1, D2); RESULT.setLine(V1left); :}
				    |
				     (NoDecLists) {: RESULT=new NoDecLists(); :} /* epsilon */
				    ;

ConstDeclList ::= (ConstDeclList) CONST Type:T1 IDENT:I2 EQUAL Constants:C3 ConstantList:C4 SEMI {: RESULT=new ConstDeclList(T1, I2, C3, C4); RESULT.setLine(T1left); :};

ConstantList ::= (ConstList) ConstantList:C1 COMMA IDENT:I2 EQUAL Constants:C3 {: RESULT=new ConstList(C1, I2, C3); RESULT.setLine(C1left); :}
				|
				 (NoConstList) {: RESULT=new NoConstList(); :} /* epsilon */
				;

Constants ::=(NumConstant) NUMBER:N1 {: RESULT=new NumConstant(N1); RESULT.setLine(N1left); :} 
			| 
			(CharConstant) CHAR_CONST:C1 {: RESULT=new CharConstant(C1); RESULT.setLine(C1left); :} ;


VarDeclList ::= (VarDeclarList) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarList(V1, V2); RESULT.setLine(V1left); :}  
				|
				(NoVarDeclarList) {: RESULT=new NoVarDeclarList(); :} /* epsilon */ 
				;
				
VarDecl ::= (VarDecl) Type:varType VarDeclarationList:V1 SEMI {: RESULT=new VarDecl(varType, V1); RESULT.setLine(varTypeleft); :} ;

VarDeclarationList ::=  (VarDeclaratList) VarDeclarationList:V1  COMMA VarDeclaration:V2 {: RESULT=new VarDeclaratList(V1, V2); RESULT.setLine(V1left); :}
					|
					 (VarDeclarat) VarDeclaration:V1 {: RESULT=new VarDeclarat(V1); RESULT.setLine(V1left); :}
					;
					
VarDeclaration ::= (VarDeclaration) IDENT:I1 Brackets:B2 {: RESULT=new VarDeclaration(I1, B2); RESULT.setLine(I1left); :} ;

MethodDeclList ::= (MethDeclList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethDeclList(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethDeclList) {: RESULT=new NoMethDeclList(); :} /* epsilon */
					;

MethodDecl ::= (MethodDecl)  MethodTypeName:M1 LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :} 
			   ;

MethodTypeName ::= (MethTypeName) Type:retType IDENT:methName {: RESULT=new MethTypeName(retType, methName); RESULT.setLine(retTypeleft); :}
				|
				(NoMethTypeName) VOID IDENT:methName {: RESULT=new NoMethTypeName(methName); RESULT.setLine(methNameleft); :}
				;

FormPars ::= (FormalPars) FormalParamList:F1 {: RESULT=new FormalPars(F1); RESULT.setLine(F1left); :} 
			 |
			 (NoFormalPars) {: RESULT=new NoFormalPars(); :}/* epsilon */ ;



FormalParamList ::= (FormalParsList) FormalParamList:F1  COMMA FormalParamDecl:F2 {: RESULT=new FormalParsList(F1, F2); RESULT.setLine(F1left); :}
					|
					(FormalParsDecl) FormalParamDecl:F1 {: RESULT=new FormalParsDecl(F1); RESULT.setLine(F1left); :}
					;
					
FormalParamDecl ::= (FormalParamDecl) Type:T1 IDENT:I2 Brackets:B3 {: RESULT=new FormalParamDecl(T1, I2, B3); RESULT.setLine(T1left); :} ;


Brackets ::= (Bracket) LBRACKET RBRACKET {: RESULT=new Bracket(); :}
			 |
			 (NoBracket) {: RESULT=new NoBracket(); :} /* epsilon */
			 ;

Type ::= (Types) IDENT:typeName {: RESULT=new Types(typeName); RESULT.setLine(typeNameleft); :} 
		 |
		 (NoTypes) IDENT:I1 DBLDOT DBLDOT IDENT:typeName {: RESULT=new NoTypes(I1, typeName); RESULT.setLine(I1left); :}
		 ;
		 
StatementList ::= (StmtList)  StatementList:S1 Statement:S2 {: RESULT=new StmtList(S1, S2); RESULT.setLine(S1left); :} 
					|
				   (NoStmtList) {: RESULT=new NoStmtList(); :} /* epsilon */
				  ;
				  
Statement ::= (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
  			  |
			  (PrintStmtTwo) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintStmtTwo(E1, N2); RESULT.setLine(E1left); :}	 
			  |
			  (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
			  |
			  (DesStmt) DesignatorStatement:D1 SEMI {: RESULT=new DesStmt(D1); RESULT.setLine(D1left); :}
			  ;

DesignatorStatement ::= (DesginatorAssignop) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesginatorAssignop(D1, A2, E3); RESULT.setLine(D1left); :}
					|
					(DesignatorInc)Designator:D1 PLUS PLUS {: RESULT=new DesignatorInc(D1); RESULT.setLine(D1left); :}
					|
					(DesignatorDecr) Designator:D1 MINUS MINUS {: RESULT=new DesignatorDecr(D1); RESULT.setLine(D1left); :}
					;

ActPars ::=  (ActParams) ActParamList:A1 {: RESULT=new ActParams(A1); RESULT.setLine(A1left); :} 
			| 
		     (NoActParams) {: RESULT=new NoActParams(); :} /* epsilon */ 
		    ;
			   
ActParamList ::= (ActParamsList) ActParamList:A1 COMMA Expr:E2 {: RESULT=new ActParamsList(A1, E2); RESULT.setLine(A1left); :}
				|
				 (ActParamExpr) Expr:E1 {: RESULT=new ActParamExpr(E1); RESULT.setLine(E1left); :}
				;
		
Expr ::= (ExprAddop) Expr:te Addop:A1 Term:t {: RESULT=new ExprAddop(te, A1, t); RESULT.setLine(teleft); :}
		 |
		 (ExprTerm) Term:t {: RESULT=new ExprTerm(t); RESULT.setLine(tleft); :}
		 |
		 (ExprMinusTerm) MINUS Term:t {: RESULT=new ExprMinusTerm(t); RESULT.setLine(tleft); :}
		 ;

Term ::= (TermMulop) Term:te Mulop:M1 Factor:f {: RESULT=new TermMulop(te, M1, f); RESULT.setLine(teleft); :}
		|
		(TermFactor) Factor:f {: RESULT=new TermFactor(f); RESULT.setLine(fleft); :}
		;


Factor ::= (FactorNum) NUMBER:N1 {: RESULT=new FactorNum(N1); RESULT.setLine(N1left); :}
			|
			(FactorChar) CHAR_CONST:C1 {: RESULT=new FactorChar(C1); RESULT.setLine(C1left); :}
			|
			(FactorNew) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new FactorNew(T1, E2); RESULT.setLine(T1left); :}
			|
			(FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
			|
		    (FactorDes) Designator:d {: RESULT=new FactorDes(d); RESULT.setLine(dleft); :}
		    ;


Designator ::= (Des) IDENT:desName DesignatorElem:D1 {: RESULT=new Des(desName, D1); RESULT.setLine(desNameleft); :}
			|
			 (DesWithIdent) IDENT:I1 DBLDOT DBLDOT IDENT:desName DesignatorElem:D2 {: RESULT=new DesWithIdent(I1, desName, D2); RESULT.setLine(I1left); :}
			;

DesignatorElem ::= (DesElem) LBRACKET Expr:E1 RBRACKET {: RESULT=new DesElem(E1); RESULT.setLine(E1left); :} 
				|
				(NoDesElem) {: RESULT=new NoDesElem(); :} /* epsilon */
				;
					

Label ::= (Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};


Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :};


Relop ::= (RelopEqual) EQUAL EQUAL {: RESULT=new RelopEqual(); :}
		|
		 (RelopNotEqual) EXCL EQUAL {: RESULT=new RelopNotEqual(); :}
		|
		(RelopRArrow) RARROW {: RESULT=new RelopRArrow(); :}
		|
		(RelopLArrow) LARROW {: RESULT=new RelopLArrow(); :}
		|
		(RelopLess) LARROW EQUAL {: RESULT=new RelopLess(); :}
		|
		(RelopMore) RARROW EQUAL {: RESULT=new RelopMore(); :}
		;

Addop ::= (AddopPlus)  PLUS {: RESULT=new AddopPlus(); :} 
		|
		(AddopMinus) MINUS {: RESULT=new AddopMinus(); :}
		;
		
		
Mulop ::= (MulopMul) MUL {: RESULT=new MulopMul(); :}
		|
		(MulopDiv) DIV {: RESULT=new MulopDiv(); :}
		|
		(MulopMod) MOD {: RESULT=new MulopMod(); :}
		;		
		
		

		 