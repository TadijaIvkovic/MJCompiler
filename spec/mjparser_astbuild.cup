package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;



parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal PROG, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal FOR, STATIC, NAMESPACE;
terminal PLUS, MINUS, DIV, MOD, MUL, EQUAL, DBLDOT, SEMI, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE;
terminal LBRACKET, RBRACKET, LARROW, RARROW, EXCL, AMPER, LINE;

terminal Integer NUMBER ;
terminal Character CHAR_CONST;
terminal BOOL_CONST;
terminal String IDENT ;


nonterminal Program Program;
nonterminal ProgName ProgName;
nonterminal NamespaceList NamespaceList;
nonterminal Namespace Namespace;
nonterminal DeclarationList DeclarationList;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstantList ConstantList;
nonterminal Constants Constants;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal VarDeclarationList VarDeclarationList;
nonterminal VarDeclaration VarDeclaration;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal MethodTypeName MethodTypeName;
nonterminal Type Type;
nonterminal Brackets Brackets;
nonterminal FormPars FormPars;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Expr Expr;
nonterminal Term Term;
nonterminal Factor Factor;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal ActPars ActPars;
nonterminal ActParamList ActParamList;
nonterminal Designator Designator;
nonterminal DesignatorElem DesignatorElem;
nonterminal Label Label;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;


Program ::= PROG ProgName:p NamespaceList:N1 DeclarationList:D2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new ProgramDerived1(p, N1, D2, M3); RESULT.setLine(pleft); :} ;


ProgName ::=  IDENT:pName {: RESULT=new ProgNameDerived1(pName); RESULT.setLine(pNameleft); :} ;

NamespaceList ::=  NamespaceList:N1 Namespace:N2 {: RESULT=new NamespaceListDerived1(N1, N2); RESULT.setLine(N1left); :}
					| {: RESULT=new NamespaceListDerived2(); :}
					/* epsilon */
					;

Namespace ::=  NAMESPACE IDENT:nName LBRACE DeclarationList:D1 LBRACE MethodDeclList:M2 RBRACE RBRACE {: RESULT=new NamespaceDerived1(nName, D1, M2); RESULT.setLine(nNameleft); :};

DeclarationList ::=  ConstDeclList:C1 DeclarationList:D2 {: RESULT=new DeclarationListDerived1(C1, D2); RESULT.setLine(C1left); :}
				    |
					 VarDecl:V1 DeclarationList:D2 {: RESULT=new DeclarationListDerived2(V1, D2); RESULT.setLine(V1left); :}
				    | {: RESULT=new DeclarationListDerived3(); :}
				     /* epsilon */
				    ;

ConstDeclList ::=  CONST Type:T1 IDENT:I2 EQUAL Constants:C3 ConstantList:C4 SEMI {: RESULT=new ConstDeclListDerived1(T1, I2, C3, C4); RESULT.setLine(T1left); :};

ConstantList ::= ConstantList:C1 COMMA IDENT:I2 EQUAL Constants:C3 {: RESULT=new ConstantListDerived1(C1, I2, C3); RESULT.setLine(C1left); :}
				| {: RESULT=new ConstantListDerived2(); :}
				 /* epsilon */
				;

Constants ::= NUMBER:N1 {: RESULT=new ConstantsDerived1(N1); RESULT.setLine(N1left); :} | CHAR_CONST:C1 {: RESULT=new ConstantsDerived2(C1); RESULT.setLine(C1left); :} ;


VarDeclList ::=  VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclListDerived1(V1, V2); RESULT.setLine(V1left); :}  
				| {: RESULT=new VarDeclListDerived2(); :}
				/* epsilon */ 
				;
				
VarDecl ::=  Type:varType VarDeclarationList:V1 SEMI {: RESULT=new VarDeclDerived1(varType, V1); RESULT.setLine(varTypeleft); :} ;

VarDeclarationList ::=  VarDeclarationList:V1  COMMA VarDeclaration:V2 {: RESULT=new VarDeclarationListDerived1(V1, V2); RESULT.setLine(V1left); :}
					|
					 VarDeclaration:V1 {: RESULT=new VarDeclarationListDerived2(V1); RESULT.setLine(V1left); :}
					;
					
VarDeclaration ::=  IDENT:I1 Brackets:B2 {: RESULT=new VarDeclarationDerived1(I1, B2); RESULT.setLine(I1left); :} ;

MethodDeclList ::=  MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclListDerived1(M1, M2); RESULT.setLine(M1left); :}
					| {: RESULT=new MethodDeclListDerived2(); :}
					/* epsilon */
					;

MethodDecl ::=  MethodTypeName:M1 LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDeclDerived1(M1, F2, V3, S4); RESULT.setLine(M1left); :} 
			   ;

MethodTypeName ::= Type:retType IDENT:methName {: RESULT=new MethodTypeNameDerived1(retType, methName); RESULT.setLine(retTypeleft); :}
				|
				VOID IDENT:methName {: RESULT=new MethodTypeNameDerived2(methName); RESULT.setLine(methNameleft); :}
				;

FormPars ::=  FormalParamList:F1 {: RESULT=new FormParsDerived1(F1); RESULT.setLine(F1left); :} | {: RESULT=new FormParsDerived2(); :}  /* epsilon */ ;



FormalParamList ::= FormalParamList:F1  COMMA FormalParamDecl:F2 {: RESULT=new FormalParamListDerived1(F1, F2); RESULT.setLine(F1left); :}
					|
					 FormalParamDecl:F1 {: RESULT=new FormalParamListDerived2(F1); RESULT.setLine(F1left); :}
					;
					
FormalParamDecl ::= Type:T1 IDENT:I2 Brackets:B3 {: RESULT=new FormalParamDeclDerived1(T1, I2, B3); RESULT.setLine(T1left); :} ;


Brackets ::= LBRACKET RBRACKET {: RESULT=new BracketsDerived1(); :}
			 | {: RESULT=new BracketsDerived2(); :}
			  /* epsilon */
			 ;

Type ::=  IDENT:typeName {: RESULT=new TypeDerived1(typeName); RESULT.setLine(typeNameleft); :} 
		 |
		  IDENT:I1 DBLDOT DBLDOT IDENT:typeName {: RESULT=new TypeDerived2(I1, typeName); RESULT.setLine(I1left); :}
		 ;
		 
StatementList ::=  StatementList:S1 Statement:S2 {: RESULT=new StatementListDerived1(S1, S2); RESULT.setLine(S1left); :} 
					| {: RESULT=new StatementListDerived2(); :}
				   /* epsilon */
				  ;
				  
Statement ::= PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new StatementDerived1(E1); RESULT.setLine(E1left); :}
  			  |
			  PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new StatementDerived2(E1, N2); RESULT.setLine(E1left); :}	 
			  |
			  READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new StatementDerived3(D1); RESULT.setLine(D1left); :}
			  |
			  DesignatorStatement:D1 SEMI {: RESULT=new StatementDerived4(D1); RESULT.setLine(D1left); :}
			  ;

DesignatorStatement ::= Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorStatementDerived1(D1, A2, E3); RESULT.setLine(D1left); :}
					|
					Designator:D1 PLUS PLUS {: RESULT=new DesignatorStatementDerived2(D1); RESULT.setLine(D1left); :}
					|
					Designator:D1 MINUS MINUS {: RESULT=new DesignatorStatementDerived3(D1); RESULT.setLine(D1left); :}
					;

ActPars ::=  ActParamList:A1 {: RESULT=new ActParsDerived1(A1); RESULT.setLine(A1left); :} 
			| {: RESULT=new ActParsDerived2(); :} 
		     /* epsilon */ 
		    ;
			   
ActParamList ::=  ActParamList:A1 COMMA Expr:E2 {: RESULT=new ActParamListDerived1(A1, E2); RESULT.setLine(A1left); :}
				|
				 Expr:E1 {: RESULT=new ActParamListDerived2(E1); RESULT.setLine(E1left); :}
				;
		
Expr ::=  Expr:te Addop:A1 Term:t {: RESULT=new ExprDerived1(te, A1, t); RESULT.setLine(teleft); :}
		 |
		  Term:t {: RESULT=new ExprDerived2(t); RESULT.setLine(tleft); :}
		 |
		  MINUS Term:t {: RESULT=new ExprDerived3(t); RESULT.setLine(tleft); :}
		 ;

Term ::= Term:te Mulop:M1 Factor:f {: RESULT=new TermDerived1(te, M1, f); RESULT.setLine(teleft); :}
		|
		Factor:f {: RESULT=new TermDerived2(f); RESULT.setLine(fleft); :}
		;


Factor ::= NUMBER:N1 {: RESULT=new FactorDerived1(N1); RESULT.setLine(N1left); :}
			|
			CHAR_CONST:C1 {: RESULT=new FactorDerived2(C1); RESULT.setLine(C1left); :}
			|
			 NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new FactorDerived3(T1, E2); RESULT.setLine(T1left); :}
			|
			LPAREN Expr:E1 RPAREN {: RESULT=new FactorDerived4(E1); RESULT.setLine(E1left); :}
			|
		     Designator:d {: RESULT=new FactorDerived5(d); RESULT.setLine(dleft); :}
		    ;


Designator ::= IDENT:desName DesignatorElem:D1 {: RESULT=new DesignatorDerived1(desName, D1); RESULT.setLine(desNameleft); :}
			|
			 IDENT:I1 DBLDOT DBLDOT IDENT:desName DesignatorElem:D2 {: RESULT=new DesignatorDerived2(I1, desName, D2); RESULT.setLine(I1left); :}
			;

DesignatorElem ::= LBRACKET Expr:E1 RBRACKET {: RESULT=new DesignatorElemDerived1(E1); RESULT.setLine(E1left); :} 
				| {: RESULT=new DesignatorElemDerived2(); :}
				/* epsilon */
				;
					

Label ::=  IDENT:I1 {: RESULT=new LabelDerived1(I1); RESULT.setLine(I1left); :};


Assignop ::=  EQUAL {: RESULT=new AssignopDerived1(); :};


Relop ::=EQUAL EQUAL {: RESULT=new RelopDerived1(); :}
		|
		 EXCL EQUAL {: RESULT=new RelopDerived2(); :}
		|
		RARROW {: RESULT=new RelopDerived3(); :}
		|
		LARROW {: RESULT=new RelopDerived4(); :}
		|
		 LARROW EQUAL {: RESULT=new RelopDerived5(); :}
		|
		 RARROW EQUAL {: RESULT=new RelopDerived6(); :}
		;

Addop ::=  PLUS {: RESULT=new AddopDerived1(); :} 
		|
		MINUS {: RESULT=new AddopDerived2(); :}
		;
		
		
Mulop ::= MUL {: RESULT=new MulopDerived1(); :}
		|
		DIV {: RESULT=new MulopDerived2(); :}
		|
		MOD {: RESULT=new MulopDerived3(); :}
		;		
		
		

		 