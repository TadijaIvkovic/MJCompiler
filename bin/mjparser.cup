package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;



parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal PROG, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal FOR, STATIC, NAMESPACE;
terminal PLUS, MINUS, DIV, MOD, MUL, EQUAL, UNION, DBLDOT, SEMI, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE;
terminal LBRACKET, RBRACKET, LARROW, RARROW, EXCL, AMPER, LINE, MAP, DO, WHILE, SET;

terminal Integer NUMBER ;
terminal Character CHAR_CONST;
terminal Integer BOOL;
terminal String IDENT ;


nonterminal DeclarationList, ConstDeclList, ConstantList, Constants;
nonterminal VarDeclList, VarDecl, VarDeclarationList, VarDeclaration, MethodDeclList, MethodDecl;
nonterminal  StatementList, Statement;
nonterminal DesignatorStatement, ActPars, ActParamList, Assignop, Addop, Mulop, Setop;
nonterminal SingleStatement, Statements;
nonterminal ConDecl;


nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, Designator, DesignatorArrayName, MethodSignature;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Unary, Factor, Term, TermList, Expr, ExprList, Type;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ActPar;

Program ::= (Program) PROG ProgName:p DeclarationList LBRACE MethodDeclList RBRACE ;


ProgName ::= (ProgName) IDENT:progName ;

DeclarationList ::= (ConstDecLists) ConstDeclList DeclarationList
				    |
					 (VarDecLists) VarDecl DeclarationList
				    |
				     (NoDecLists) /* epsilon */
				    ;

ConstDeclList ::= (ConstDeclList) CONST Type ConDecl ConstantList SEMI;

ConDecl ::= (ConDecl) IDENT:constDecl EQUAL Constants;

ConstantList ::= (ConstList) ConstantList COMMA ConDecl
				 |
				 (NoConstList) /* epsilon */
				 ;

Constants ::=(NumConstant) NUMBER 
			 | 
			 (CharConstant) CHAR_CONST 
			 |
			 (BoolConstant) BOOL
			 ;


VarDeclList ::= (VarDeclarList) VarDeclList VarDecl  
				|
				(NoVarDeclarList) /* epsilon */ 
				;
				
VarDecl ::= (VarDecl) Type:varType VarDeclarationList SEMI ;

VarDeclarationList ::=  (VarDeclaratList) VarDeclarationList  COMMA VarDeclaration
						|
					    (VarDeclarat) VarDeclaration
						;
					
VarDeclaration ::= (VarDeclarationVar) IDENT:varDeclarationV
					|
					(VarDeclarationArray) IDENT:varDeclarationA LBRACKET RBRACKET
					;

MethodDeclList ::=  (MethodDeclList)  MethodDecl ;

MethodDecl ::= (MethodDecl)  MethodSignature LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE ;

MethodSignature ::=  (MethodSignature) VOID IDENT:methName;
					
Type ::= (Type) IDENT:typeName ;

StatementList ::= (StmtList)  StatementList Statement 
				  |
				  (NoStmtList) /* epsilon */
				  ;

Statement ::=  (StatementSingle) SingleStatement
				|
				(StatementMultiple)Statements
				;


SingleStatement ::= (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
  			  |
  			  (ErrorStmt) error SEMI:l
  			  {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
  			  |
			  (PrintStmtTwo) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI	 
			  |
			  (ReadStmt) READ LPAREN Designator RPAREN SEMI
			  |
			  (DesStmt) DesignatorStatement SEMI
			  |
			  (ReturnStmt) RETURN SEMI
			  ;
			
Statements::= (Statements) LBRACE StatementList RBRACE;
			  

DesignatorStatement ::= (DesignatorAssignop) Designator Assignop Expr
						|
						(DesignatorInc) Designator PLUS PLUS
						|
						(DesignatorDec) Designator MINUS MINUS
						| 
						(DesignatorSetop) Designator Assignop Designator Setop Designator
						|
						(DesignatorActPars) Designator LPAREN ActPars RPAREN
						;

ActPars ::=  (ActParams) ActPar ActParamList 
			 | 
		     (NoActParams) /* epsilon */ 
		     ;
			   
ActParamList ::= (ActParamsList) COMMA ActPar ActParamList
				 |
				 (ActParamsExpr) /* epsilon */
				 ;
				 
ActPar ::= (ActPar) Expr;				 
	
Expr ::= (Expr) ExprList;	
	
ExprList ::= (ExprAddopList) ExprList:te Addop Term:t
		 |
		 (ExprTerm) Term:t
		 ;
		
		
Term ::= (Term) TermList;

TermList ::= (TermMulopList) TermList:te Mulop Unary:u
		 |
		 (TermFactor) Unary:u
		 ;

Unary ::= (UnaryFactor) Factor 
			|
			(UnaryMinusFactor) MINUS Factor
			;

Factor ::=  (FactorNum) NUMBER
			|
			(FactorChar) CHAR_CONST
			|
			(FactorBool) BOOL
			|
			(FactorNewExpr) NEW Type LBRACKET Expr RBRACKET
			|
			(FactorExpr) LPAREN Expr RPAREN
			|
		    (FactorDes) Designator:d
		   	|
		    (FactorMeth) Designator LPAREN ActPars RPAREN
		    ;


Designator ::= (DesignatorArray) DesignatorArrayName LBRACKET Expr RBRACKET
			   |
			   (DesignatorVar) IDENT:d
			   ;
					
DesignatorArrayName ::= (DesignatorArrayName) IDENT:d;

Assignop ::= (Assignop) EQUAL;


Addop ::= (AddopPlus)  PLUS 
		  |
		  (AddopMinus) MINUS
		  ;
		
		
Mulop ::= (MulopMul) MUL
		  |
		  (MulopDiv) DIV
		  |
		  (MulopMod) MOD
		  ;
		
Setop ::= (Setop) UNION ;
		
		

		 