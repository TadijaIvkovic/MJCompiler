package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;



parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal PROG, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal FOR, STATIC, NAMESPACE;
terminal PLUS, MINUS, DIV, MOD, MUL, EQUAL, DBLDOT, SEMI, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE;
terminal LBRACKET, RBRACKET, LARROW, RARROW, EXCL, AMPER, LINE, UNION, MAP;

terminal Integer NUMBER ;
terminal Character CHAR_CONST;
terminal BOOL_CONST;
terminal String IDENT ;


nonterminal Program, ProgName, DeclarationList, ConstDeclList, ConstantList, Constants;
nonterminal VarDeclList, VarDecl, VarDeclarationList, VarDeclaration, MethodDeclList, MethodDecl, MethodTypeName, Type;
nonterminal Brackets, FormPars, FormalParamList, FormalParamDecl, StatementList, Statement, Expr;
nonterminal Term, Factor, DesignatorStatement, ActPars, ActParamList, Designator, DesignatorElem, Label, Assignop, Relop, Addop, Mulop;
nonterminal Condition, CondTerm, CondFact, Setop, Matched, Unmatched;


Program ::= (Program) PROG ProgName:p DeclarationList LBRACE MethodDeclList RBRACE ;


ProgName ::= (ProgName) IDENT:pName ;

DeclarationList ::= (ConstDecLists) ConstDeclList DeclarationList
				    |
					 (VarDecLists) VarDecl DeclarationList
				    |
				     (NoDecLists) /* epsilon */
				    ;

ConstDeclList ::= (ConstDeclList) CONST Type IDENT EQUAL Constants ConstantList SEMI;

ConstantList ::= (ConstList) ConstantList COMMA IDENT EQUAL Constants
				|
				 (NoConstList) /* epsilon */
				;

Constants ::=(NumConstant) NUMBER 
			| 
			(CharConstant) CHAR_CONST ;


VarDeclList ::= (VarDeclarList) VarDeclList VarDecl  
				|
				(NoVarDeclarList) /* epsilon */ 
				;
				
VarDecl ::= (VarDecl) Type:varType VarDeclarationList SEMI ;

VarDeclarationList ::=  (VarDeclaratList) VarDeclarationList  COMMA VarDeclaration
					|
					 (VarDeclarat) VarDeclaration
					;
					
VarDeclaration ::= (VarDeclaration) IDENT Brackets ;

MethodDeclList ::= (MethDeclList) MethodDeclList MethodDecl
					|
					(NoMethDeclList) /* epsilon */
					;

MethodDecl ::= (MethodDecl)  MethodTypeName LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
			   ;

MethodTypeName ::= (MethTypeName) Type:retType IDENT:methName
				|
				(NoMethTypeName) VOID IDENT:methName
				;

FormPars ::= (FormalPars) FormalParamList 
			 |
			 (NoFormalPars)/* epsilon */ ;



FormalParamList ::= (FormalParsList) FormalParamList  COMMA FormalParamDecl
					|
					(FormalParsDecl) FormalParamDecl
					;
					
FormalParamDecl ::= (FormalParamDecl) Type IDENT Brackets ;


Brackets ::= (Bracket) LBRACKET RBRACKET
			 |
			 (NoBracket) /* epsilon */
			 ;

Type ::= (Type) IDENT:typeName ;
		 
StatementList ::= (StmtList)  StatementList Statement 
					|
				   (NoStmtList) /* epsilon */
				  ;

Statement ::= (MatchedStmt) Matched
		   |
		   (UnmatchedStmt) Unmatched
		   ; 

Unmatched ::= (UnmatchedIf) IF LPAREN Condition RPAREN Statement
		 	|
		 	(UnmatchedIfElse) IF LPAREN Condition RPAREN Matched ELSE Unmatched
		 	;
				  
Matched ::= (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
  			  |
			  (PrintStmtTwo) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI	 
			  |
			  (ReadStmt) READ LPAREN Designator RPAREN SEMI
			  |
			  (DesStmt) DesignatorStatement SEMI
			  |
			  (IfElseStmt) IF LPAREN Condition RPAREN Matched ELSE Matched
			  ;

DesignatorStatement ::= (DesginatorAssignop) Designator Assignop Expr
					|
					(DesignatorInc) Designator PLUS PLUS
					|
					(DesignatorDec) Designator MINUS MINUS
					| 
					(DesignatorActPars) Designator LPAREN ActPars RPAREN
					|
					(DesignatorSetop) Designator Assignop Designator Setop Designator
					;

ActPars ::=  (ActParams) ActParamList 
			| 
		     (NoActParams) /* epsilon */ 
		    ;
			   
ActParamList ::= (ActParamsList) ActParamList COMMA Expr
				|
				 (ActParamsExpr) Expr
				;
		
Condition ::= Condition LINE LINE CondTerm
				|
				CondTerm
				;

CondTerm ::= CondTerm AMPER AMPER CondFact
			|
			CondFact
			;
			
CondFact ::= Expr
			|
			Expr Relop Expr
			;
		
Expr ::= (ExprAddop) Expr:te Addop Term:t
		 |
		 (ExprTerm) Term:t
		 |
		 (ExprMinusTerm) MINUS Term:t
		 |
		 (ExprMap) Designator MAP Designator
		 ;

Term ::= (TermMulop) Term:te Mulop Factor:f
		|
		(TermFactor) Factor:f
		;


Factor ::= (FactorNum) NUMBER
			|
			(FactorChar) CHAR_CONST
			|
			(FactorNew) NEW Type LBRACKET Expr RBRACKET
			|
			(FactorExpr) LPAREN Expr RPAREN
			|
		    (FactorDes) Designator:d
		    ;


Designator ::= (Designator) IDENT:desName DesignatorElem;

DesignatorElem ::= (DesElem) LBRACKET Expr RBRACKET 
				|
				(NoDesElem) /* epsilon */
				;
					

Label ::= (Label) IDENT;


Assignop ::= (Assignop) EQUAL;


Relop ::= (RelopEqual) EQUAL EQUAL
		|
		 (RelopNotEqual) EXCL EQUAL
		|
		(RelopRArrow) RARROW
		|
		(RelopLArrow) LARROW
		|
		(RelopLess) LARROW EQUAL
		|
		(RelopMore) RARROW EQUAL
		;

Addop ::= (AddopPlus)  PLUS 
		|
		(AddopMinus) MINUS
		;
		
		
Mulop ::= (MulopMul) MUL
		|
		(MulopDiv) DIV
		|
		(MulopMod) MOD
		;
		
Setop ::= (Setop) UNION ;		
		
		

		 