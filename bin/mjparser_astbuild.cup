package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;



parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal PROG, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal FOR, STATIC, NAMESPACE;
terminal PLUS, MINUS, DIV, MOD, MUL, EQUAL, UNION, DBLDOT, SEMI, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE;
terminal LBRACKET, RBRACKET, LARROW, RARROW, EXCL, AMPER, LINE, MAP, DO, WHILE, SET;

terminal Integer NUMBER ;
terminal Character CHAR_CONST;
terminal Integer BOOL;
terminal String IDENT ;


nonterminal DeclarationList DeclarationList;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstantList ConstantList;
nonterminal Constants Constants;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal VarDeclarationList VarDeclarationList;
nonterminal VarDeclaration VarDeclaration;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal MethodSignature MethodSignature;
nonterminal Type Type;
nonterminal FormPars FormPars;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal ActPars ActPars;
nonterminal ActParamList ActParamList;
nonterminal Label Label;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal Setop Setop;
nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;
nonterminal Statements Statements;
nonterminal WhileStart WhileStart;
nonterminal DoWhileEnd DoWhileEnd;
nonterminal DoWhileStart DoWhileStart;
nonterminal ConditionWithStatement ConditionWithStatement;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, Designator, DesignatorName;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Unary, Factor, Term, Expr;

Program ::= (Program) PROG ProgName:p DeclarationList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :} ;


ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :} ;

DeclarationList ::= (ConstDecLists) ConstDeclList:C1 DeclarationList:D2 {: RESULT=new ConstDecLists(C1, D2); RESULT.setLine(C1left); :}
				    |
					 (VarDecLists) VarDecl:V1 DeclarationList:D2 {: RESULT=new VarDecLists(V1, D2); RESULT.setLine(V1left); :}
				    |
				     (NoDecLists) {: RESULT=new NoDecLists(); :} /* epsilon */
				    ;

ConstDeclList ::= (ConstDeclList) CONST Type:T1 IDENT:constDecl EQUAL Constants:C2 ConstantList:C3 SEMI {: RESULT=new ConstDeclList(T1, constDecl, C2, C3); RESULT.setLine(T1left); :};

ConstantList ::= (ConstList) ConstantList:C1 COMMA IDENT:constDecl2 EQUAL Constants:C2 {: RESULT=new ConstList(C1, constDecl2, C2); RESULT.setLine(C1left); :}
				 |
				 (NoConstList) {: RESULT=new NoConstList(); :} /* epsilon */
				 ;

Constants ::=(NumConstant) NUMBER:N1 {: RESULT=new NumConstant(N1); RESULT.setLine(N1left); :} 
			 | 
			 (CharConstant) CHAR_CONST:C1 {: RESULT=new CharConstant(C1); RESULT.setLine(C1left); :} 
			 |
			 (BoolConstant) BOOL:B1 {: RESULT=new BoolConstant(B1); RESULT.setLine(B1left); :}
			 ;


VarDeclList ::= (VarDeclarList) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarList(V1, V2); RESULT.setLine(V1left); :}  
				|
				(NoVarDeclarList) {: RESULT=new NoVarDeclarList(); :} /* epsilon */ 
				;
				
VarDecl ::= (VarDecl) Type:varType VarDeclarationList:V1 SEMI {: RESULT=new VarDecl(varType, V1); RESULT.setLine(varTypeleft); :} ;

VarDeclarationList ::=  (VarDeclaratList) VarDeclarationList:V1  COMMA VarDeclaration:V2 {: RESULT=new VarDeclaratList(V1, V2); RESULT.setLine(V1left); :}
						|
					    (VarDeclarat) VarDeclaration:V1 {: RESULT=new VarDeclarat(V1); RESULT.setLine(V1left); :}
						;
					
VarDeclaration ::= (VarDeclarationSingle) IDENT:varDeclaration {: RESULT=new VarDeclarationSingle(varDeclaration); RESULT.setLine(varDeclarationleft); :} 
					|
					(VarDeclarationArray) IDENT:varDeclaration LBRACKET RBRACKET {: RESULT=new VarDeclarationArray(varDeclaration); RESULT.setLine(varDeclarationleft); :}
					;

MethodDeclList ::=  (MethDeclList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethDeclList(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethDeclList) {: RESULT=new NoMethDeclList(); :} /* epsilon */
					;

MethodDecl ::= (MethodDecl)  MethodSignature:M1 LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :} ;

MethodSignature ::= (MethTypeName) Type:retType IDENT:methName {: RESULT=new MethTypeName(retType, methName); RESULT.setLine(retTypeleft); :}
					|
					(NoMethTypeName) VOID IDENT:methName {: RESULT=new NoMethTypeName(methName); RESULT.setLine(methNameleft); :}
					;

FormPars ::= (FormalPars) FormalParamList:F1 {: RESULT=new FormalPars(F1); RESULT.setLine(F1left); :} 
			 |
			 (NoFormalPars) {: RESULT=new NoFormalPars(); :}/* epsilon */ ;



FormalParamList ::= (FormalParsList) FormalParamList:F1  COMMA FormalParamDecl:F2 {: RESULT=new FormalParsList(F1, F2); RESULT.setLine(F1left); :}
					|
					(FormalParsDecl) FormalParamDecl:F1 {: RESULT=new FormalParsDecl(F1); RESULT.setLine(F1left); :}
					;
					
FormalParamDecl ::= (FormalParamSingle) Type:T1 IDENT:fparDeclaration {: RESULT=new FormalParamSingle(T1, fparDeclaration); RESULT.setLine(T1left); :}
					|
					(FormalParamArray) Type:T1 IDENT:fparDeclaration LBRACKET RBRACKET {: RESULT=new FormalParamArray(T1, fparDeclaration); RESULT.setLine(T1left); :}
					;


Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} ;

Statements ::= (Statements) LBRACE StatementList:S1 RBRACE {: RESULT=new Statements(S1); RESULT.setLine(S1left); :} ;
		 
StatementList ::= (StmtList)  StatementList:S1 Statement:S2 {: RESULT=new StmtList(S1, S2); RESULT.setLine(S1left); :} 
				  |
				  (NoStmtList) {: RESULT=new NoStmtList(); :} /* epsilon */
				  ;

Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
		      |
		      (UnmatchedStmt) Unmatched:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
		      ; 

Unmatched ::= (UnmatchedIf) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new UnmatchedIf(C1, S2); RESULT.setLine(C1left); :}
		 	  |
		 	  (UnmatchedIfElse) IF LPAREN Condition:C1 RPAREN Matched:M2 ELSE Unmatched:U3 {: RESULT=new UnmatchedIfElse(C1, M2, U3); RESULT.setLine(C1left); :}
		 	  ;
				  
Matched ::=   (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
  			  |
  			  (ErrorStmt) error SEMI:l
  			  {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new ErrorStmt(); :}
  			  |
			  (PrintStmtTwo) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintStmtTwo(E1, N2); RESULT.setLine(E1left); :}	 
			  |
			  (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
			  |
			  (DesStmt) DesignatorStatement:D1 SEMI {: RESULT=new DesStmt(D1); RESULT.setLine(D1left); :}
			  |
			  (BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
			  |
			  (ContinueStmt) CONTINUE SEMI {: RESULT=new ContinueStmt(); :}
			  |
			  (ReturnStmt) RETURN Expr:E1 SEMI {: RESULT=new ReturnStmt(E1); RESULT.setLine(E1left); :}
			  |
			  (ReturnEmptyStmt) RETURN SEMI {: RESULT=new ReturnEmptyStmt(); :}
			  |
			  (DoWhileStatementWithStmt) DO DoWhileStart:D1 Statement:S2 WHILE WhileStart:W3 LPAREN ConditionWithStatement:C4 RPAREN DoWhileEnd:D5 SEMI {: RESULT=new DoWhileStatementWithStmt(D1, S2, W3, C4, D5); RESULT.setLine(D1left); :}
			  |
			  (IfElseStmt) IF LPAREN Condition:C1 RPAREN Matched:M2 ELSE Matched:M3 {: RESULT=new IfElseStmt(C1, M2, M3); RESULT.setLine(C1left); :}
			  |
			  (BracedStmt) Statements:S1 {: RESULT=new BracedStmt(S1); RESULT.setLine(S1left); :}
			  ;
			  
ConditionWithStatement ::=  (CondWithStatement) Condition:C1 COMMA DesignatorStatement:D2 {: RESULT=new CondWithStatement(C1, D2); RESULT.setLine(C1left); :}
							|
							(CondSolo)Condition:C1 {: RESULT=new CondSolo(C1); RESULT.setLine(C1left); :}
							|
							(WithoutCond) {: RESULT=new WithoutCond(); :} /* epsilon */
							;
			  
DoWhileStart ::= (DoWhileStart) {: RESULT=new DoWhileStart(); :} /* epsilon */;

DoWhileEnd ::= (DoWhileEnd) {: RESULT=new DoWhileEnd(); :} /* epsilon */;

WhileStart ::= (WhileStart) {: RESULT=new WhileStart(); :} /* epsilon */;


DesignatorStatement ::= (DesginatorAssignop) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesginatorAssignop(D1, A2, E3); RESULT.setLine(D1left); :}
						|
						(DesignatorInc) Designator:D1 PLUS PLUS {: RESULT=new DesignatorInc(D1); RESULT.setLine(D1left); :}
						|
						(DesignatorDec) Designator:D1 MINUS MINUS {: RESULT=new DesignatorDec(D1); RESULT.setLine(D1left); :}
						| 
						(DesignatorSetop) Designator:D1 Assignop:A2 Designator:D3 Setop:S4 Designator:D5 {: RESULT=new DesignatorSetop(D1, A2, D3, S4, D5); RESULT.setLine(D1left); :}
						|
						(DesignatorActPars) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new DesignatorActPars(D1, A2); RESULT.setLine(D1left); :}
						;

ActPars ::=  (ActParams) ActParamList:A1 {: RESULT=new ActParams(A1); RESULT.setLine(A1left); :} 
			 | 
		     (NoActParams) {: RESULT=new NoActParams(); :} /* epsilon */ 
		     ;
			   
ActParamList ::= (ActParamsList) ActParamList:A1 COMMA Expr:E2 {: RESULT=new ActParamsList(A1, E2); RESULT.setLine(A1left); :}
				 |
				 (ActParamsExpr) Expr:E1 {: RESULT=new ActParamsExpr(E1); RESULT.setLine(E1left); :}
				 ;
		
Condition ::=   (ConditionList)Condition:C1 LINE LINE CondTerm:C2 {: RESULT=new ConditionList(C1, C2); RESULT.setLine(C1left); :}
				|
				(ConditionTerm) CondTerm:C1 {: RESULT=new ConditionTerm(C1); RESULT.setLine(C1left); :}
				;

CondTerm ::= (CondTermList) CondTerm:C1 AMPER AMPER CondFact:C2 {: RESULT=new CondTermList(C1, C2); RESULT.setLine(C1left); :}
			 |
			 (ConditionFact) CondFact:C1 {: RESULT=new ConditionFact(C1); RESULT.setLine(C1left); :}
			 ;
			
CondFact ::= (Cond) Expr:E1 {: RESULT=new Cond(E1); RESULT.setLine(E1left); :}
			 |
			 (CondExpr) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondExpr(E1, R2, E3); RESULT.setLine(E1left); :}
			 ;
		
Expr ::= (ExprAddop) Expr:te Addop:A1 Term:t {: RESULT=new ExprAddop(te, A1, t); RESULT.setLine(teleft); :}
		 |
		 (ExprTerm) Term:t {: RESULT=new ExprTerm(t); RESULT.setLine(tleft); :}
		 |
		 (ExprMap) Designator:D1 MAP Designator:D2 {: RESULT=new ExprMap(D1, D2); RESULT.setLine(D1left); :}
		 ;

Term ::= (TermMulop) Term:te Mulop:M1 Unary:u {: RESULT=new TermMulop(te, M1, u); RESULT.setLine(teleft); :}
		 |
		 (TermFactor) Unary:u {: RESULT=new TermFactor(u); RESULT.setLine(uleft); :}
		 ;

Unary ::= (UnaryFactor) Factor:F1 {: RESULT=new UnaryFactor(F1); RESULT.setLine(F1left); :} 
			|
			(UnaryMinusFactor) MINUS Factor:F1 {: RESULT=new UnaryMinusFactor(F1); RESULT.setLine(F1left); :}
			;

Factor ::=  (FactorNum) NUMBER:N1 {: RESULT=new FactorNum(N1); RESULT.setLine(N1left); :}
			|
			(FactorChar) CHAR_CONST:C1 {: RESULT=new FactorChar(C1); RESULT.setLine(C1left); :}
			|
			(FactorBool) BOOL:B1 {: RESULT=new FactorBool(B1); RESULT.setLine(B1left); :}
			|
			(FactorNewExpr) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new FactorNewExpr(T1, E2); RESULT.setLine(T1left); :}
			|
			(FactorNewActPars) NEW Type:T1 LPAREN ActPars:A2 RPAREN {: RESULT=new FactorNewActPars(T1, A2); RESULT.setLine(T1left); :}
			|
			(FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
			|
		    (FactorDes) Designator:d {: RESULT=new FactorDes(d); RESULT.setLine(dleft); :}
		    |
		    (FactorDesActPars) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new FactorDesActPars(D1, A2); RESULT.setLine(D1left); :}
		    ;


Designator ::= (DesignatorArray) DesignatorName:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorArray(D1, E2); RESULT.setLine(D1left); :}
			   |
			   (DesignatorIdent) IDENT:d {: RESULT=new DesignatorIdent(d); RESULT.setLine(dleft); :}
			   ;
					
DesignatorName ::= (DesignatorName) IDENT:d {: RESULT=new DesignatorName(d); RESULT.setLine(dleft); :};

Label ::= (Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};

Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :};


Relop ::= (RelopEqual) EQUAL EQUAL {: RESULT=new RelopEqual(); :}
		|
		 (RelopNotEqual) EXCL EQUAL {: RESULT=new RelopNotEqual(); :}
		|
		(RelopRArrow) RARROW {: RESULT=new RelopRArrow(); :}
		|
		(RelopLArrow) LARROW {: RESULT=new RelopLArrow(); :}
		|
		(RelopLess) LARROW EQUAL {: RESULT=new RelopLess(); :}
		|
		(RelopMore) RARROW EQUAL {: RESULT=new RelopMore(); :}
		;

Addop ::= (AddopPlus)  PLUS {: RESULT=new AddopPlus(); :} 
		  |
		  (AddopMinus) MINUS {: RESULT=new AddopMinus(); :}
		  ;
		
		
Mulop ::= (MulopMul) MUL {: RESULT=new MulopMul(); :}
		  |
		  (MulopDiv) DIV {: RESULT=new MulopDiv(); :}
		  |
		  (MulopMod) MOD {: RESULT=new MulopMod(); :}
		  ;
		
Setop ::= (Setop) UNION {: RESULT=new Setop(); :} ;
		
		

		 