package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;



parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal PROG, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal FOR, STATIC, NAMESPACE;
terminal PLUS, MINUS, DIV, MOD, MUL, EQUAL, UNION, DBLDOT, SEMI, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE;
terminal LBRACKET, RBRACKET, LARROW, RARROW, EXCL, AMPER, LINE, MAP, DO, WHILE, SET;

terminal Integer NUMBER ;
terminal Character CHAR_CONST;
terminal Integer BOOL;
terminal String IDENT ;


nonterminal DeclarationList DeclarationList;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstantList ConstantList;
nonterminal Constants Constants;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal VarDeclarationList VarDeclarationList;
nonterminal VarDeclaration VarDeclaration;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal  StatementList StatementList;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal ActPars ActPars;
nonterminal ActParamList ActParamList;
nonterminal Assignop Assignop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal Setop Setop;
nonterminal SingleStatement SingleStatement;
nonterminal Statements Statements;
nonterminal ConDecl ConDecl;


nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, Designator, DesignatorArrayName, MethodSignature;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Unary, Factor, Term, TermList, Expr, ExprList, Type;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ActPar;

Program ::= (Program) PROG ProgName:p DeclarationList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :} ;


ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :} ;

DeclarationList ::= (ConstDecLists) ConstDeclList:C1 DeclarationList:D2 {: RESULT=new ConstDecLists(C1, D2); RESULT.setLine(C1left); :}
				    |
					 (VarDecLists) VarDecl:V1 DeclarationList:D2 {: RESULT=new VarDecLists(V1, D2); RESULT.setLine(V1left); :}
				    |
				     (NoDecLists) {: RESULT=new NoDecLists(); :} /* epsilon */
				    ;

ConstDeclList ::= (ConstDeclList) CONST Type:T1 ConDecl:C2 ConstantList:C3 SEMI {: RESULT=new ConstDeclList(T1, C2, C3); RESULT.setLine(T1left); :};

ConDecl ::= (ConDecl) IDENT:constDecl EQUAL Constants:C1 {: RESULT=new ConDecl(constDecl, C1); RESULT.setLine(constDeclleft); :};

ConstantList ::= (ConstList) ConstantList:C1 COMMA ConDecl:C2 {: RESULT=new ConstList(C1, C2); RESULT.setLine(C1left); :}
				 |
				 (NoConstList) {: RESULT=new NoConstList(); :} /* epsilon */
				 ;

Constants ::=(NumConstant) NUMBER:N1 {: RESULT=new NumConstant(N1); RESULT.setLine(N1left); :} 
			 | 
			 (CharConstant) CHAR_CONST:C1 {: RESULT=new CharConstant(C1); RESULT.setLine(C1left); :} 
			 |
			 (BoolConstant) BOOL:B1 {: RESULT=new BoolConstant(B1); RESULT.setLine(B1left); :}
			 ;


VarDeclList ::= (VarDeclarList) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarList(V1, V2); RESULT.setLine(V1left); :}  
				|
				(NoVarDeclarList) {: RESULT=new NoVarDeclarList(); :} /* epsilon */ 
				;
				
VarDecl ::= (VarDecl) Type:varType VarDeclarationList:V1 SEMI {: RESULT=new VarDecl(varType, V1); RESULT.setLine(varTypeleft); :} ;

VarDeclarationList ::=  (VarDeclaratList) VarDeclarationList:V1  COMMA VarDeclaration:V2 {: RESULT=new VarDeclaratList(V1, V2); RESULT.setLine(V1left); :}
						|
					    (VarDeclarat) VarDeclaration:V1 {: RESULT=new VarDeclarat(V1); RESULT.setLine(V1left); :}
						;
					
VarDeclaration ::= (VarDeclarationVar) IDENT:varDeclarationV {: RESULT=new VarDeclarationVar(varDeclarationV); RESULT.setLine(varDeclarationVleft); :}
					|
					(VarDeclarationArray) IDENT:varDeclarationA LBRACKET RBRACKET {: RESULT=new VarDeclarationArray(varDeclarationA); RESULT.setLine(varDeclarationAleft); :}
					;

MethodDeclList ::=  (MethodDeclList)  MethodDecl:M1 {: RESULT=new MethodDeclList(M1); RESULT.setLine(M1left); :} ;

MethodDecl ::= (MethodDecl)  MethodSignature:M1 LPAREN RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDecl(M1, V2, S3); RESULT.setLine(M1left); :} ;

MethodSignature ::=  (MethodSignature) VOID IDENT:methName {: RESULT=new MethodSignature(methName); RESULT.setLine(methNameleft); :};
					
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} ;

StatementList ::= (StmtList)  StatementList:S1 Statement:S2 {: RESULT=new StmtList(S1, S2); RESULT.setLine(S1left); :} 
				  |
				  (NoStmtList) {: RESULT=new NoStmtList(); :} /* epsilon */
				  ;

Statement ::=  (StatementSingle) SingleStatement:S1 {: RESULT=new StatementSingle(S1); RESULT.setLine(S1left); :}
				|
				(StatementMultiple)Statements:S1 {: RESULT=new StatementMultiple(S1); RESULT.setLine(S1left); :}
				;


SingleStatement ::= (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
  			  |
  			  (ErrorStmt) error SEMI:l
  			  {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new ErrorStmt(); :}
  			  |
			  (PrintStmtTwo) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintStmtTwo(E1, N2); RESULT.setLine(E1left); :}	 
			  |
			  (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
			  |
			  (DesStmt) DesignatorStatement:D1 SEMI {: RESULT=new DesStmt(D1); RESULT.setLine(D1left); :}
			  |
			  (ReturnStmt) RETURN SEMI {: RESULT=new ReturnStmt(); :}
			  ;
			
Statements::= (Statements) LBRACE StatementList:S1 RBRACE {: RESULT=new Statements(S1); RESULT.setLine(S1left); :};
			  

DesignatorStatement ::= (DesignatorAssignop) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorAssignop(D1, A2, E3); RESULT.setLine(D1left); :}
						|
						(DesignatorInc) Designator:D1 PLUS PLUS {: RESULT=new DesignatorInc(D1); RESULT.setLine(D1left); :}
						|
						(DesignatorDec) Designator:D1 MINUS MINUS {: RESULT=new DesignatorDec(D1); RESULT.setLine(D1left); :}
						| 
						(DesignatorSetop) Designator:D1 Assignop:A2 Designator:D3 Setop:S4 Designator:D5 {: RESULT=new DesignatorSetop(D1, A2, D3, S4, D5); RESULT.setLine(D1left); :}
						|
						(DesignatorActPars) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new DesignatorActPars(D1, A2); RESULT.setLine(D1left); :}
						;

ActPars ::=  (ActParams) ActPar:A1 ActParamList:A2 {: RESULT=new ActParams(A1, A2); RESULT.setLine(A1left); :} 
			 | 
		     (NoActParams) {: RESULT=new NoActParams(); :} /* epsilon */ 
		     ;
			   
ActParamList ::= (ActParamsList) COMMA ActPar:A1 ActParamList:A2 {: RESULT=new ActParamsList(A1, A2); RESULT.setLine(A1left); :}
				 |
				 (ActParamsExpr) {: RESULT=new ActParamsExpr(); :} /* epsilon */
				 ;
				 
ActPar ::= (ActPar) Expr:E1 {: RESULT=new ActPar(E1); RESULT.setLine(E1left); :};				 
	
Expr ::= (Expr) ExprList:E1 {: RESULT=new Expr(E1); RESULT.setLine(E1left); :};	
	
ExprList ::= (ExprAddopList) ExprList:te Addop:A1 Term:t {: RESULT=new ExprAddopList(te, A1, t); RESULT.setLine(teleft); :}
		 |
		 (ExprTerm) Term:t {: RESULT=new ExprTerm(t); RESULT.setLine(tleft); :}
		 ;
		
		
Term ::= (Term) TermList:T1 {: RESULT=new Term(T1); RESULT.setLine(T1left); :};

TermList ::= (TermMulopList) TermList:te Mulop:M1 Unary:u {: RESULT=new TermMulopList(te, M1, u); RESULT.setLine(teleft); :}
		 |
		 (TermFactor) Unary:u {: RESULT=new TermFactor(u); RESULT.setLine(uleft); :}
		 ;

Unary ::= (UnaryFactor) Factor:F1 {: RESULT=new UnaryFactor(F1); RESULT.setLine(F1left); :} 
			|
			(UnaryMinusFactor) MINUS Factor:F1 {: RESULT=new UnaryMinusFactor(F1); RESULT.setLine(F1left); :}
			;

Factor ::=  (FactorNum) NUMBER:N1 {: RESULT=new FactorNum(N1); RESULT.setLine(N1left); :}
			|
			(FactorChar) CHAR_CONST:C1 {: RESULT=new FactorChar(C1); RESULT.setLine(C1left); :}
			|
			(FactorBool) BOOL:B1 {: RESULT=new FactorBool(B1); RESULT.setLine(B1left); :}
			|
			(FactorNewExpr) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new FactorNewExpr(T1, E2); RESULT.setLine(T1left); :}
			|
			(FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
			|
		    (FactorDes) Designator:d {: RESULT=new FactorDes(d); RESULT.setLine(dleft); :}
		   	|
		    (FactorMeth) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new FactorMeth(D1, A2); RESULT.setLine(D1left); :}
		    ;


Designator ::= (DesignatorArray) DesignatorArrayName:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorArray(D1, E2); RESULT.setLine(D1left); :}
			   |
			   (DesignatorVar) IDENT:d {: RESULT=new DesignatorVar(d); RESULT.setLine(dleft); :}
			   ;
					
DesignatorArrayName ::= (DesignatorArrayName) IDENT:d {: RESULT=new DesignatorArrayName(d); RESULT.setLine(dleft); :};

Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :};


Addop ::= (AddopPlus)  PLUS {: RESULT=new AddopPlus(); :} 
		  |
		  (AddopMinus) MINUS {: RESULT=new AddopMinus(); :}
		  ;
		
		
Mulop ::= (MulopMul) MUL {: RESULT=new MulopMul(); :}
		  |
		  (MulopDiv) DIV {: RESULT=new MulopDiv(); :}
		  |
		  (MulopMod) MOD {: RESULT=new MulopMod(); :}
		  ;
		
Setop ::= (Setop) UNION {: RESULT=new Setop(); :} ;
		
		

		 